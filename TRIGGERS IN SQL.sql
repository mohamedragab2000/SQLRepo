
-- CREATE NEW DATABASE 'EMPLOYEE_DATA'

CREATE DATABASE EMPLOYEE_DATA ;

USE EMPLOYEE_DATA;

-- CREATE  EMPLOYEE_INFO TABLE THAT CONTAIN INFORMATION ABOUT EMPLOYEE

CREATE TABLE EMPLOYEE_INFO(
ID INT PRIMARY KEY ,
NAME NVARCHAR(MAX),
SALARY MONEY NULL ,
GENDER NVARCHAR(MAX) NULL,
);

-- CREATE TABLE THAT CONTAIN ANY EDIT CARRY OUT ON EMPLOYEE_INFO TABLE

CREATE TABLE  EMPLOYEE_LOG (
ID INT IDENTITY PRIMARY KEY ,
EDIT_DATA NVARCHAR(MAX)
);

-- INSERT SOME EMPLOYEE INFORMATION TUPLE/ROW 

INSERT INTO EMPLOYEE_INFO
SELECT 1000,'MOHAMED',5400,'MALE' UNION ALL
SELECT 2000,'EYAD',6000,'MALE' UNION ALL
SELECT 3000,'MANAR',9640,'FEMALE'

INSERT INTO EMPLOYEE_INFO
SELECT 4000,'MOSTAFA',5790,'MALE'

-- CREATE TRIIGER THAT companion to INSERT OPERATION 
-- THIS TRIGGER ADD INFORMATION ABOUT ANY EDIT IN EMPLOYEE_INFO IN EMPLOYEE_LOG

-- TO DISBALE TRIGGER
DISABLE TRIGGER ADDITION_TRANS ON EMPLOYEE_INFO

CREATE TRIGGER ADDITION_TRANS
ON EMPLOYEE_INFO
AFTER INSERT 
AS BEGIN
DECLARE  @ID INT ;
DECLARE @NAME NVARCHAR(MAX);
SELECT @ID = ID FROM inserted
SELECT @NAME =NAME FROM inserted
INSERT INTO EMPLOYEE_LOG VALUES(
'NEW EMPLOYEE IS ADDED TO EMPLOYEE TABLE 
THIS EMPLOYEE WITH ID : '+ CAST (@ID AS nvarchar(MAX)) 
+' AND HIS NAME IS : ' +@NAME+
'  AT : '+ CAST (GETDATE() AS nvarchar(MAX))
)
END

--INSERT AFTER CREATE TRIGGER

INSERT INTO EMPLOYEE_INFO 
SELECT 5000,'YASSER',7800,'MALE'


-- CREATE TRIIGER THAT companion to DELETE  OPERATION 

CREATE TRIGGER DELETED_TRANS
ON EMPLOYEE_INFO
AFTER DELETE 
AS BEGIN
DECLARE  @ID INT ;

SELECT @ID = ID FROM deleted

INSERT INTO EMPLOYEE_LOG VALUES(
'EMPLOYEE IS DELETED FROM  EMPLOYEE TABLE 
THIS EMPLOYEE WITH ID : '+ CAST (@ID AS nvarchar(MAX)) +
'  AT : '+ CAST (GETDATE() AS nvarchar(MAX))
)
END

DELETE FROM EMPLOYEE_INFO WHERE ID =4000

-- CREATE TRIIGER THAT companion to UPDATE  OPERATION 

CREATE TRIGGER UPDATED_TRANS
ON EMPLOYEE_INFO
AFTER UPDATE
AS BEGIN
SELECT *FROM inserted
SELECT * FROM deleted 

INSERT INTO EMPLOYEE_LOG VALUES(
'EMPLOYEE INFORMATION  IS UPDATED FROM  EMPLOYEE TABLE '
+CAST(GETDATE() AS nvarchar(MAX))
)
END

UPDATE EMPLOYEE_INFO SET SALARY =200000 WHERE  ID=5000


-- USING INSTEAD OF KEYWORD

CREATE TRIGGER NOTHING_TRANS
ON EMPLOYEE_INFO
INSTEAD OF INSERT
AS BEGIN
PRINT('EXAM WILL BE OPEN WHEN YOU PAY ');
END

INSERT INTO EMPLOYEE_INFO(ID,NAME)VALUES(8000,'NASER')



-- LOG FILE THAT CONTAIN 
CREATE TABLE ATTENDFILE(
ID INT PRIMARY KEY,
EMP_ATTENDEES NVARCHAR(MAX)
)

-- for knowledge only 

DROP TRIGGER IF EXISTS EMPLOYEED_ATTENDE
CREATE TRIGGER EMPLOYEED_ATTENDE
ON EMPLOYEE_INFO
INSTEAD OF INSERT 
AS BEGIN
DECLARE @TIME TIME
SELECT @TIME =CONVERT(VARCHAR(10), GETDATE(), 108)
DECLARE @ID INT
SELECT @ID = ID FROM inserted
IF(@TIME<'22:00:00' )
IF EXISTS(SELECT ID FROM EMPLOYEE_INFO WHERE ID =@ID)
INSERT INTO ATTENDFILE(ID,EMP_ATTENDEES)
VALUES(@ID ,'ATTENDED')
ELSE 
PRINT('YOU HAVE NOT ACCOUNT IN SYSTEM')
ELSE
IF EXISTS(SELECT ID FROM EMPLOYEE_INFO WHERE ID =@ID)
INSERT INTO ATTENDFILE(ID,EMP_ATTENDEES)
VALUES(@ID ,'ABSENT')
ELSE 
PRINT('YOU HAVE NOT ACCOUNT IN SYSTEM')
END


INSERT INTO EMPLOYEE_INFO(ID,NAME)VALUES(2000, 'EYAD')
INSERT INTO EMPLOYEE_INFO(ID,NAME)VALUES(4000, 'MOSTAFA')

-- USE THE TRIGGER TO PROVIDE A SECURITY LEVEL

CREATE TRIGGER NOEDITING 
ON ATTENDFILE
FOR  INSERT ,DELETE ,UPDATE 
AS
BEGIN
PRINT('YOU CAN NOT EDIT IN THIS FEILD ')
END


INSERT INTO ATTENDFILE VALUES(1 ,'ASSSSSSSSSSSSSSS')